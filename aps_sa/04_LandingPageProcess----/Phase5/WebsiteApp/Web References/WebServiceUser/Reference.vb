'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WebServiceUser
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Users Access Web ServicesSoap", [Namespace]:="http://WebServicesDataUser.itdev/")>  _
    Partial Public Class UsersAccessWebServices
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getApplicationListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUserNameIfValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getApplicationAccessRightOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getModuleAccessRightOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getModuleFunctionAccessRightOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getIsGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUserDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isUserInformationExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUserInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Display_NoteAdminOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WebsiteApp.My.MySettings.Default.WebsiteApp_WebServiceUser_Users_x0020_Access_x0020_Web_x0020_Services
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getApplicationListCompleted As getApplicationListCompletedEventHandler
        
        '''<remarks/>
        Public Event getUserNameIfValidCompleted As getUserNameIfValidCompletedEventHandler
        
        '''<remarks/>
        Public Event getApplicationAccessRightCompleted As getApplicationAccessRightCompletedEventHandler
        
        '''<remarks/>
        Public Event getModuleAccessRightCompleted As getModuleAccessRightCompletedEventHandler
        
        '''<remarks/>
        Public Event getModuleFunctionAccessRightCompleted As getModuleFunctionAccessRightCompletedEventHandler
        
        '''<remarks/>
        Public Event getIsGroupCompleted As getIsGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event getUserDataCompleted As getUserDataCompletedEventHandler
        
        '''<remarks/>
        Public Event isUserInformationExistsCompleted As isUserInformationExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event getUserInformationCompleted As getUserInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event Display_NoteAdminCompleted As Display_NoteAdminCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/getApplicationList", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getApplicationList(ByVal userID As String, ByVal isAll As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getApplicationList", New Object() {userID, isAll})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getApplicationListAsync(ByVal userID As String, ByVal isAll As Boolean)
            Me.getApplicationListAsync(userID, isAll, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getApplicationListAsync(ByVal userID As String, ByVal isAll As Boolean, ByVal userState As Object)
            If (Me.getApplicationListOperationCompleted Is Nothing) Then
                Me.getApplicationListOperationCompleted = AddressOf Me.OngetApplicationListOperationCompleted
            End If
            Me.InvokeAsync("getApplicationList", New Object() {userID, isAll}, Me.getApplicationListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetApplicationListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getApplicationListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getApplicationListCompleted(Me, New getApplicationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/getUserNameIfValid", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUserNameIfValid(ByVal userID As String, ByVal userEncrypted As String) As String
            Dim results() As Object = Me.Invoke("getUserNameIfValid", New Object() {userID, userEncrypted})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUserNameIfValidAsync(ByVal userID As String, ByVal userEncrypted As String)
            Me.getUserNameIfValidAsync(userID, userEncrypted, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUserNameIfValidAsync(ByVal userID As String, ByVal userEncrypted As String, ByVal userState As Object)
            If (Me.getUserNameIfValidOperationCompleted Is Nothing) Then
                Me.getUserNameIfValidOperationCompleted = AddressOf Me.OngetUserNameIfValidOperationCompleted
            End If
            Me.InvokeAsync("getUserNameIfValid", New Object() {userID, userEncrypted}, Me.getUserNameIfValidOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUserNameIfValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUserNameIfValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUserNameIfValidCompleted(Me, New getUserNameIfValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/getApplicationAccessRight", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getApplicationAccessRight(ByVal userID As String, ByVal appID As String) As Boolean
            Dim results() As Object = Me.Invoke("getApplicationAccessRight", New Object() {userID, appID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getApplicationAccessRightAsync(ByVal userID As String, ByVal appID As String)
            Me.getApplicationAccessRightAsync(userID, appID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getApplicationAccessRightAsync(ByVal userID As String, ByVal appID As String, ByVal userState As Object)
            If (Me.getApplicationAccessRightOperationCompleted Is Nothing) Then
                Me.getApplicationAccessRightOperationCompleted = AddressOf Me.OngetApplicationAccessRightOperationCompleted
            End If
            Me.InvokeAsync("getApplicationAccessRight", New Object() {userID, appID}, Me.getApplicationAccessRightOperationCompleted, userState)
        End Sub
        
        Private Sub OngetApplicationAccessRightOperationCompleted(ByVal arg As Object)
            If (Not (Me.getApplicationAccessRightCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getApplicationAccessRightCompleted(Me, New getApplicationAccessRightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/getModuleAccessRight", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getModuleAccessRight(ByVal userID As String, ByVal appID As String, ByVal moduleID As String) As Boolean
            Dim results() As Object = Me.Invoke("getModuleAccessRight", New Object() {userID, appID, moduleID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getModuleAccessRightAsync(ByVal userID As String, ByVal appID As String, ByVal moduleID As String)
            Me.getModuleAccessRightAsync(userID, appID, moduleID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getModuleAccessRightAsync(ByVal userID As String, ByVal appID As String, ByVal moduleID As String, ByVal userState As Object)
            If (Me.getModuleAccessRightOperationCompleted Is Nothing) Then
                Me.getModuleAccessRightOperationCompleted = AddressOf Me.OngetModuleAccessRightOperationCompleted
            End If
            Me.InvokeAsync("getModuleAccessRight", New Object() {userID, appID, moduleID}, Me.getModuleAccessRightOperationCompleted, userState)
        End Sub
        
        Private Sub OngetModuleAccessRightOperationCompleted(ByVal arg As Object)
            If (Not (Me.getModuleAccessRightCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getModuleAccessRightCompleted(Me, New getModuleAccessRightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/getModuleFunctionAccessRight", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getModuleFunctionAccessRight(ByVal userID As String, ByVal appID As String, ByVal moduleID As String, ByVal functionID As String) As Boolean
            Dim results() As Object = Me.Invoke("getModuleFunctionAccessRight", New Object() {userID, appID, moduleID, functionID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getModuleFunctionAccessRightAsync(ByVal userID As String, ByVal appID As String, ByVal moduleID As String, ByVal functionID As String)
            Me.getModuleFunctionAccessRightAsync(userID, appID, moduleID, functionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getModuleFunctionAccessRightAsync(ByVal userID As String, ByVal appID As String, ByVal moduleID As String, ByVal functionID As String, ByVal userState As Object)
            If (Me.getModuleFunctionAccessRightOperationCompleted Is Nothing) Then
                Me.getModuleFunctionAccessRightOperationCompleted = AddressOf Me.OngetModuleFunctionAccessRightOperationCompleted
            End If
            Me.InvokeAsync("getModuleFunctionAccessRight", New Object() {userID, appID, moduleID, functionID}, Me.getModuleFunctionAccessRightOperationCompleted, userState)
        End Sub
        
        Private Sub OngetModuleFunctionAccessRightOperationCompleted(ByVal arg As Object)
            If (Not (Me.getModuleFunctionAccessRightCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getModuleFunctionAccessRightCompleted(Me, New getModuleFunctionAccessRightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/getIsGroup", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIsGroup(ByVal userID As String, ByVal groupID As String) As Boolean
            Dim results() As Object = Me.Invoke("getIsGroup", New Object() {userID, groupID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIsGroupAsync(ByVal userID As String, ByVal groupID As String)
            Me.getIsGroupAsync(userID, groupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIsGroupAsync(ByVal userID As String, ByVal groupID As String, ByVal userState As Object)
            If (Me.getIsGroupOperationCompleted Is Nothing) Then
                Me.getIsGroupOperationCompleted = AddressOf Me.OngetIsGroupOperationCompleted
            End If
            Me.InvokeAsync("getIsGroup", New Object() {userID, groupID}, Me.getIsGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIsGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIsGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIsGroupCompleted(Me, New getIsGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/getUserData", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUserData(ByVal userID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getUserData", New Object() {userID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUserDataAsync(ByVal userID As String)
            Me.getUserDataAsync(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUserDataAsync(ByVal userID As String, ByVal userState As Object)
            If (Me.getUserDataOperationCompleted Is Nothing) Then
                Me.getUserDataOperationCompleted = AddressOf Me.OngetUserDataOperationCompleted
            End If
            Me.InvokeAsync("getUserData", New Object() {userID}, Me.getUserDataOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUserDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUserDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUserDataCompleted(Me, New getUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/isUserInformationExists", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isUserInformationExists(ByVal userID As String) As Boolean
            Dim results() As Object = Me.Invoke("isUserInformationExists", New Object() {userID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isUserInformationExistsAsync(ByVal userID As String)
            Me.isUserInformationExistsAsync(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isUserInformationExistsAsync(ByVal userID As String, ByVal userState As Object)
            If (Me.isUserInformationExistsOperationCompleted Is Nothing) Then
                Me.isUserInformationExistsOperationCompleted = AddressOf Me.OnisUserInformationExistsOperationCompleted
            End If
            Me.InvokeAsync("isUserInformationExists", New Object() {userID}, Me.isUserInformationExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnisUserInformationExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.isUserInformationExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isUserInformationExistsCompleted(Me, New isUserInformationExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/getUserInformation", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUserInformation(ByVal userID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getUserInformation", New Object() {userID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUserInformationAsync(ByVal userID As String)
            Me.getUserInformationAsync(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUserInformationAsync(ByVal userID As String, ByVal userState As Object)
            If (Me.getUserInformationOperationCompleted Is Nothing) Then
                Me.getUserInformationOperationCompleted = AddressOf Me.OngetUserInformationOperationCompleted
            End If
            Me.InvokeAsync("getUserInformation", New Object() {userID}, Me.getUserInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUserInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUserInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUserInformationCompleted(Me, New getUserInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://WebServicesDataUser.itdev/Display_NoteAdmin", RequestNamespace:="http://WebServicesDataUser.itdev/", ResponseNamespace:="http://WebServicesDataUser.itdev/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Display_NoteAdmin(ByVal appID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Display_NoteAdmin", New Object() {appID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Display_NoteAdminAsync(ByVal appID As String)
            Me.Display_NoteAdminAsync(appID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Display_NoteAdminAsync(ByVal appID As String, ByVal userState As Object)
            If (Me.Display_NoteAdminOperationCompleted Is Nothing) Then
                Me.Display_NoteAdminOperationCompleted = AddressOf Me.OnDisplay_NoteAdminOperationCompleted
            End If
            Me.InvokeAsync("Display_NoteAdmin", New Object() {appID}, Me.Display_NoteAdminOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisplay_NoteAdminOperationCompleted(ByVal arg As Object)
            If (Not (Me.Display_NoteAdminCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Display_NoteAdminCompleted(Me, New Display_NoteAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getApplicationListCompletedEventHandler(ByVal sender As Object, ByVal e As getApplicationListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getApplicationListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getUserNameIfValidCompletedEventHandler(ByVal sender As Object, ByVal e As getUserNameIfValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUserNameIfValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getApplicationAccessRightCompletedEventHandler(ByVal sender As Object, ByVal e As getApplicationAccessRightCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getApplicationAccessRightCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getModuleAccessRightCompletedEventHandler(ByVal sender As Object, ByVal e As getModuleAccessRightCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getModuleAccessRightCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getModuleFunctionAccessRightCompletedEventHandler(ByVal sender As Object, ByVal e As getModuleFunctionAccessRightCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getModuleFunctionAccessRightCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getIsGroupCompletedEventHandler(ByVal sender As Object, ByVal e As getIsGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIsGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getUserDataCompletedEventHandler(ByVal sender As Object, ByVal e As getUserDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUserDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub isUserInformationExistsCompletedEventHandler(ByVal sender As Object, ByVal e As isUserInformationExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isUserInformationExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getUserInformationCompletedEventHandler(ByVal sender As Object, ByVal e As getUserInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUserInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub Display_NoteAdminCompletedEventHandler(ByVal sender As Object, ByVal e As Display_NoteAdminCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Display_NoteAdminCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
